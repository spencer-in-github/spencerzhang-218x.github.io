filter(.,FuelCat == "GAS") %>%
mutate(
prim_perc = GasGen/NetGen
)
df_coal <- df %>%
filter(.,FuelCat == "COAL") %>%
mutate(
prim_perc = CoalGen/NetGen
)
df_bio <- df %>%
filter(.,FuelCat == "BIOMASS") %>%
mutate(
prim_perc = BiomassGen/NetGen
)
df_other <- df %>%
filter(.,FuelCat == "OTHRFOSL") %>%
mutate(
prim_perc = OtherFossilGen/NetGen
)
df_unk <- df %>%
filter(.,FuelCat == "WSTHTOTPUR") %>%
mutate(
prim_perc = OtherGen/NetGen
)
hist(df_oil$prim_perc, xlab = "OilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_gas$prim_perc, xlab = "GasGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim = c(0,1))
hist(df_coal$prim_perc, xlab = "CoalGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_bio$prim_perc, xlab = "BiomassGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_other$prim_perc, xlab = "OtherFossilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_unk$prim_perc, xlab = "OtherUnknownGen Fraction", main = "Histogram of Primary Fuel Fraction")
df <- df %>%
#select(-c("Combust")) %>%
mutate(
PrimPerc =
case_when(
FuelCat == "OIL" ~OilGen/NetGen,
FuelCat == "GAS" ~GasGen/NetGen,
FuelCat == "COAL" ~CoalGen/NetGen,
FuelCat == "BIOMASS" ~BiomassGen/NetGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen/NetGen,
FuelCat == "WSTHTOTPUR" ~OtherGen/NetGen
),
PrimGen =
case_when(
FuelCat == "OIL" ~OilGen,
FuelCat == "GAS" ~GasGen,
FuelCat == "COAL" ~CoalGen,
FuelCat == "BIOMASS" ~BiomassGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen,
FuelCat == "WSTHTOTPUR" ~OtherGen
)
)
#ggplot(df, aes(x = PrimPerc, xlim = c(0,1))) + geom_histogram() + facet_grid(cols = vars(FuelCat))
hist(df$PrimPerc, xlab = "PrimGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim =c(0,1))
pol_df <- df %>%
group_by(Fuel) %>%
summarize(
Performance = sum(NetGen),
CO2 = sum(CO2),
NOX = sum(NOX),
SO2 = sum(SO2)
)
pol_df <- pol_df %>%
mutate(
co2perc = CO2/sum(pol_df$CO2),
so2perc = SO2/sum(pol_df$SO2),
noxperc = NOX/sum(pol_df$NOX)
)
pol_df[which.max(pol_df$co2perc),]
pol_df[which.max(pol_df$so2perc),]
pol_df[which.max(pol_df$noxperc),]
pol_df[which.max(pol_df$Performance),]
names(pol_df)
pol_df <- pol_df %>%
mutate(
perf_factor = (CO2+NOX+SO2)/Performance
)
order(pol_df$perf_factor)
order(pol_df$perf_factor)(1:5)
order(pol_df$perf_factor)[1:5]
order(pol_df$perf_factor)[-5:-1]
order(pol_df$perf_factor)[-5:]
order(pol_df$perf_factor)[-5:-1]
pol_df[res(order(pol_df$perf_factor))[1:5],]
pol_df[rev(order(pol_df$perf_factor))[1:5],]
pol_df[rev(order(pol_df$perf_factor))[1:5],]
pol_df[order(pol_df$perf_factor)[1:5],]
knitr::opts_chunk$set(echo = F, warning = F, message = F)
#package loading
library(e1071)
library(neuralnet)
library(ggplot2)
library(polynom)
library(dplyr)
library(tidyr)
library(ggfortify)
library(pls)
library(tree)
library(gbm)
library(leaps)
library(AppliedPredictiveModeling)
library(caret)
library(e1071)
library(earth)
library(leaps)
library(boot)
library(kernlab)
library(randomForest)
library(foreach)
library(import)
library(neuralnet)
library(pls)
#library(foba) #cant install for R version reasons
#load data
plt <- get(load("plants.Rdata"))
#information check
#should print 5395, 38; and 38 column names
dim(plt)
names(plt)
#1. Calculate CapFac
plt$CapFac <- plt$NetGen/(plt$Capacity * 8760)
#check
summary(plt$CapFac)
#2. calculate Plant Nominal Heat Rate(Heatrate)
plt$HeatRate <- case_when(
plt$Combust == 1 ~1000*(plt$HeatInput/plt$NetGen),
plt$Combust == 0.5 ~1000*(plt$HeatInput/plt$CombGen),
TRUE ~0
)
#check: is this supposed to be this big in numbers??
summary(plt$HeatRate)
#3. calculate annual output emission rate for different pollutants
plt$CO2OutRate <- 2000 * plt$CO2/plt$NetGen
plt$SO2OutRate <- 2000 * plt$SO2/plt$NetGen
plt$NOXOutRate <- 2000 * plt$NOX/plt$NetGen
#The fraction of US electrictity from combustion plants
#todo: partial combustion accuracy
frac_com <- sum(plt$Combust*plt$NetGen)/sum(plt$NetGen)
dim(plt)
#remove all non-combustion plants for later analysis
comb <- filter(plt, Combust != 0)
dim(comb)
perc_co2 <- sum(comb$CO2)/sum(plt$CO2)
perc_so2 <- sum(comb$SO2)/sum(plt$SO2)
perc_no2 <- sum(comb$NO2)/sum(plt$NO2)
#compute the fraction of partial combustion's generation
perc_partial <- sum(comb[which(comb$Combust==0.5),]$NetGen)/sum(comb$NetGen)
print(perc_partial)
#riding partial combustion
df <- filter(comb, Combust == 1)
df_oil <- df %>%
filter(.,FuelCat == "OIL") %>%
mutate(
prim_perc = OilGen/NetGen
)
df_gas <- df %>%
filter(.,FuelCat == "GAS") %>%
mutate(
prim_perc = GasGen/NetGen
)
df_coal <- df %>%
filter(.,FuelCat == "COAL") %>%
mutate(
prim_perc = CoalGen/NetGen
)
df_bio <- df %>%
filter(.,FuelCat == "BIOMASS") %>%
mutate(
prim_perc = BiomassGen/NetGen
)
df_other <- df %>%
filter(.,FuelCat == "OTHRFOSL") %>%
mutate(
prim_perc = OtherFossilGen/NetGen
)
df_unk <- df %>%
filter(.,FuelCat == "WSTHTOTPUR") %>%
mutate(
prim_perc = OtherGen/NetGen
)
hist(df_oil$prim_perc, xlab = "OilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_gas$prim_perc, xlab = "GasGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim = c(0,1))
hist(df_coal$prim_perc, xlab = "CoalGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_bio$prim_perc, xlab = "BiomassGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_other$prim_perc, xlab = "OtherFossilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_unk$prim_perc, xlab = "OtherUnknownGen Fraction", main = "Histogram of Primary Fuel Fraction")
df <- df %>%
#select(-c("Combust")) %>%
mutate(
PrimPerc =
case_when(
FuelCat == "OIL" ~OilGen/NetGen,
FuelCat == "GAS" ~GasGen/NetGen,
FuelCat == "COAL" ~CoalGen/NetGen,
FuelCat == "BIOMASS" ~BiomassGen/NetGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen/NetGen,
FuelCat == "WSTHTOTPUR" ~OtherGen/NetGen
),
PrimGen =
case_when(
FuelCat == "OIL" ~OilGen,
FuelCat == "GAS" ~GasGen,
FuelCat == "COAL" ~CoalGen,
FuelCat == "BIOMASS" ~BiomassGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen,
FuelCat == "WSTHTOTPUR" ~OtherGen
)
)
#ggplot(df, aes(x = PrimPerc, xlim = c(0,1))) + geom_histogram() + facet_grid(cols = vars(FuelCat))
hist(df$PrimPerc, xlab = "PrimGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim =c(0,1))
pol_df <- df %>%
group_by(Fuel) %>%
summarize(
Performance = sum(NetGen),
CO2 = sum(CO2),
NOX = sum(NOX),
SO2 = sum(SO2)
)
pol_df <- pol_df %>%
mutate(
co2perc = CO2/sum(pol_df$CO2),
so2perc = SO2/sum(pol_df$SO2),
noxperc = NOX/sum(pol_df$NOX)
)
pol_df[which.max(pol_df$co2perc),]
pol_df[which.max(pol_df$so2perc),]
pol_df[which.max(pol_df$noxperc),]
pol_df[which.max(pol_df$Performance),]
print(pol_df[rev(order(pol_df$Performance)),c(1,2,6:8)])
pol_df <- pol_df %>%
mutate(
em_factor = (CO2+NOX+SO2)/Performance
)
pol_df[rev(order(pol_df$em_factor))[1:5],]
pol_df[order(pol_df$em_factor)[1:5],]
pol_df[order(pol_df$em_factor)[1:5],]
pol_df[order(pol_df$em_factor)[2:6],]
??histogram
??hist
ggplot(df, aes(x = PrimPerc, xlim = c(0,1))) + geom_histogram() + facet_grid(cols = vars(FuelCat))
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat))
??geom_histogram
??facet_grid
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat)) + facet_wrap(nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat)) + facet_wrap(cols = vars(FuelCat), nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat)) + facet_wrap(FuelCat, nrow = 3)
??facet_wrap
??facet_wrap
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat), nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat), scales = 'free', space = 'free', nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat),scales = 'free', space = 'free', nrow = 2)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat),scales = 'free', nrow = 2)
knitr::opts_chunk$set(echo = TRUE)
library(matlib)
install.packages("matlib")
library(matlib)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(censusapi)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717£59faa9a28f611dab")
paste0("b","a")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = 2019,
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
```
rm(list = ls())
library(tidyverse)
library(censusapi)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717£59faa9a28f611dab")
id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = 2019,
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
rm(list = ls())
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = 2019,
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = 2019,
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
library(tidyverse)
library(censusapi)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
library(censusapi)
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
) %>%
select(ends_with("E") & -c(state, NAME))
library(tidyverse)
library(censusapi)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
) %>%
select(ends_with("E") & -c(state, NAME))
#id = c("A","B","C","D","E","F","G","H")
bay_income_white <-
getCensus(
name = "acs/acs5",
vintage = 2019,
region = "county:001,013,041,055,075,081,085,095,097",
regionin = "state:06",
vars = "group(B19001A)"
) %>%
select(ends_with("E") & -c(state, NAME))
names(bay_income_white)
View(bay_income_white)
setwd("~/GitHub/spencerzhang-218x.github.io")
temp <- tempfile()
download.file("https://oehha.ca.gov/media/downloads/calenviroscreen/document/calenviroscreen40resultsdatadictionaryf2021.zip",destfile = temp)
ces4 <- read_excel(
unzip(
temp,
"calenviroscreen40resultsdatadictionary_F_2021.xlsx"
),
sheet = "CES4.0FINAL_results"
)
unlink(temp)
setwd("~/GitHub/spencerzhang-218x.github.io")
library(tidyverse)
library(censusapi)
library(sf)
library(tigris)
library(readxl)
library(leaflet)
temp <- tempfile()
download.file("https://oehha.ca.gov/media/downloads/calenviroscreen/document/calenviroscreen40resultsdatadictionaryf2021.zip",destfile = temp)
ces4 <- read_excel(
unzip(
temp,
"calenviroscreen40resultsdatadictionary_F_2021.xlsx"
),
sheet = "CES4.0FINAL_results"
)
unlink(temp)
ces4 <- read_xlsx('calenviroscreen40resultsdatadictionary_F_2021.xlsx')
names(ces4)
#in class note
ces4_clean <- ces4 %>% dplyr::select(!ends_with("Pctl"))
sum(is.na(ces4_clean$Poverty)) #75 rows with no data; cant do lm with
names(ces4_clean)
bay_county_names <-
c(
"Alameda",
"Contra Costa",
"Marin",
"Napa",
"San Francisco",
"San Mateo",
"Santa Clara",
"Solano",
"Sonoma"
)
ca_tracts <- tracts("CA", cb = T, progress_bar = F)
ces4_bay_pm25 <-
ces4 %>%
filter(`California County` %in% bay_county_names) %>%
select(`Census Tract`, PM2.5) %>%
left_join(
ca_tracts %>%
transmute(GEOID = as.numeric(GEOID)),
by = c("Census Tract" = "GEOID")
) %>%
st_as_sf()
bay_county_names <-
c(
"Alameda",
"Contra Costa",
"Marin",
"Napa",
"San Francisco",
"San Mateo",
"Santa Clara",
"Solano",
"Sonoma"
)
ca_tracts <- tracts("CA", cb = T, progress_bar = F)
ces4_bay_pm25 <-
ces4 %>%
filter(`California County` %in% bay_county_names) %>%
select(`Census Tract`, PM2.5) %>%
left_join(
ca_tracts %>%
transmute(GEOID = as.numeric(GEOID)),
by = c("Census Tract" = "GEOID")
) %>%
st_as_sf()
pm25_pal <- colorNumeric(
palette = "Reds",
domain = ces4_bay_pm25$PM2.5
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = ces4_bay_pm25,
fillColor = ~pm25_pal(PM2.5),
color = "white",
weight = 0.5,
fillOpacity = 0.5,
label = ~PM2.5
)
pm25_pal <- colorNumeric(
palette = "Reds",
domain = ces4_bay_pm25$PM2.5
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = ces4_bay_pm25,
fillColor = ~pm25_pal(PM2.5),
color = "white",
weight = 0.5,
fillOpacity = 0.5,
label = ~PM2.5
)
summary(ces4_bay_pm25$PM2.5)
df <- ces4 %>%
filter(`California County` %in% bay_county_names) %>%
select(`Census Tract`, PM2.5, Asthma) %>%
drop_na() %>%
left_join(
ca_tracts %>%
transmute(GEOID = as.numeric(GEOID)),
by = c("Census Tract" = "GEOID")
)
ggplot(
data = df,
aes(
x = PM2.5,
y = Asthma
)
) +
geom_point() +
geom_smooth(method = "lm")
model <- lm(Asthma ~PM2.5, df)
model <- lm(Asthma ~PM2.5, df)
names(model)
plot(density(residuals(model)))
model <- lm(Asthma ~PM2.5, df)
model <- lm(Asthma ~PM2.5, df)
ggplot(
data = df,
aes(
x = PM2.5,
y = Asthma
)
) +
geom_point() +
geom_smooth(method = "lm")
model <- lm(Asthma ~PM2.5, df)
model
names(model)
model$coefficients
model$coefficients[2]
model$coefficients['PM2.5']
class(model$coefficients['PM2.5'])
model$residuals
??lm
summary(model)
