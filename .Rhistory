mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(st_area(.)) * 5280^2 / 1000
)
# Chunk 12
fc_pop_2010_2020$pop_perc = case_when(
fc_pop_2010_2020$pop_2010 == 0 & !fc_pop_2010_2020$pop_2020 == 0 ~100,
fc_pop_2010_2020$pop_2010 == 0 & fc_pop_2010_2020$pop_2020 == 0 ~0,
TRUE ~ (fc_pop_2010_2020$pop_2020 - fc_pop_2010_2020$pop_2010)/fc_pop_2010_2020$pop_2010
) #todo change this into pipeline
# Chunk 13
max <- max(abs(min(fc_pop_2010_2020$absolute_pop)), abs(max(fc_pop_2010_2020$absolute_pop)))
absolute_pal <- colorNumeric(
palette = "PiYG",
domain = c(-max,max)
)
# Chunk 14
leaflet(data = fc_pop_2010_2020) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~absolute_pal(absolute_pop),
label = ~round(absolute_pop),
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1
) %>%
addLegend(
pal = absolute_pal,
value = c(-max,max),
title = "Population Density Change in Foster City from 2010 to 2020")
perc_max <- max(abs(min(fc_pop_2010_2020$pop_perc)), abs(max(fc_pop_2010_2020$pop_perc)))
perc_pal <- colorNumeric(
palette = "PiYG",
domain = c(-perc_max,perc_max)
)
leaflet(data = fc_pop_2010_2020) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~perc_pal(pop_perc),
label = ~round(pop_perc),
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1
) %>%
addLegend(
pal = perc_pal,
value = c(-perc_max,perc_max),
title = "Population Percentage Change in Foster City from 2010 to 2020")
leaflet(data = fc_pop_2010_2020) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~absolute_pal(absolute_pop),
label = ~round(absolute_pop),
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1
) %>%
addLegend(
pal = absolute_pal,
value = c(-max,max),
title = "Population Density Change<br>in Foster City<br>from 2010 to 2020")
names(fc_blocks_2020_intersect)
names(fc_blocks_2020_reshaped)
names(fc_pop_2010_2020)
dim(fc_pop_2010_2020)
summary(fc_pop_2010_2020)
(sum(fc_pop_2010_2020$pop_2020)-sum(fc_pop_2010_2020$pop_2010))/sum(fc_pop_2010_2020$pop_2010)
#density change
projection <- "+proj=longlat +datum=WGS84 +units=ft +no_defs" #todo: dont know where this goes
fc_pop_2010_2020 <- fc_blocks_2010 %>%
left_join(fc_blocks_2020_reshaped) %>%
mutate(
absolute_pop = (pop_2020 - pop_2010) / (as.numeric(st_area(.)) * 0.00024710538146717)
)
#return
# "absolute_pop" in fc_pop_2010_2020
#percentage change
#todo: change into pipeline
fc_pop_2010_2020$pop_perc = case_when(
fc_pop_2010_2020$pop_2010 == 0 & !fc_pop_2010_2020$pop_2020 == 0 ~100,
fc_pop_2010_2020$pop_2010 == 0 & fc_pop_2010_2020$pop_2020 == 0 ~0,
TRUE ~ (fc_pop_2010_2020$pop_2020 - fc_pop_2010_2020$pop_2010)/fc_pop_2010_2020$pop_2010
)
#Original comment
#To get our color pallete to be symmetrical across 0, we need the minimum and maximum bounds to be equidistant from 0. For our absolute change, let's try stretching one bound to meet the other. Using https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf, we can identify "PiYG" as a satisfactory palette for our purposes.
#get color pallete for density change
max <- max(abs(min(fc_pop_2010_2020$absolute_pop)), abs(max(fc_pop_2010_2020$absolute_pop)))
absolute_pal <- colorNumeric(
palette = "PiYG",
domain = c(-max,max)
)
#map for density change
leaflet(data = fc_pop_2010_2020) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~absolute_pal(absolute_pop),
label = ~round(absolute_pop),
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1
) %>%
addLegend(
pal = absolute_pal,
value = c(-max,max),
title = "Population Density Change<br>in Foster City<br>from 2010 to 2020")
summary(fc_pop_2010_2020)
#map for density change
leaflet(data = fc_pop_2010_2020) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~absolute_pal(absolute_pop),
label = ~round(absolute_pop),
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1
) %>%
addLegend(
pal = absolute_pal,
value = c(-max,max),
title = "Population Density Change<br>in Foster City<br>from 2010 to 2020")
??addLegend
1/43560
perc_max <- max(fc_pop_2010_2020$pop_perc)
perc_pal <- colorNumeric(
palette = "PiYG",
domain = c(-100,perc_max)
)
leaflet(data = fc_pop_2010_2020) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~perc_pal(pop_perc),
label = ~round(pop_perc),
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1
) %>%
addLegend(
pal = perc_pal,
value = c(-100,perc_max),
title = "Population Percentage Change<br>in Foster City<br>from 2010 to 2020<br>(unit:%)")
perc_max <- max(fc_pop_2010_2020$pop_perc)
perc_pal <- colorNumeric(
palette = "PiYG",
domain = c(-100,100)
)
leaflet(data = fc_pop_2010_2020) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~perc_pal(pop_perc),
label = ~round(pop_perc),
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1
) %>%
addLegend(
pal = perc_pal,
value = c(-100,100),
title = "Population Percentage Change<br>in Foster City<br>from 2010 to 2020<br>(unit:%)")
perc_max <- max(abs(min(fc_pop_2010_2020$pop_perc)), abs(max(fc_pop_2010_2020$pop_perc)))
perc_pal <- colorNumeric(
palette = "PiYG",
domain = c(-perc_max,perc_max)
)
leaflet(data = fc_pop_2010_2020) %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~perc_pal(pop_perc),
label = ~round(pop_perc),
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1
) %>%
addLegend(
pal = perc_pal,
value = c(-perc_max,perc_max),
title = "Population Percentage Change<br>in Foster City<br>from 2010 to 2020<br>(unit:%)")
knitr::opts_chunk$set(echo = F, warning = F, message = F)
#package loading
library(e1071)
library(neuralnet)
library(ggplot2)
library(polynom)
library(dplyr)
library(tidyr)
library(ggfortify)
library(pls)
library(tree)
library(gbm)
library(leaps)
library(AppliedPredictiveModeling)
library(caret)
library(e1071)
library(earth)
library(leaps)
library(boot)
library(kernlab)
library(randomForest)
library(foreach)
library(import)
library(neuralnet)
library(pls)
#library(foba) #cant install for R version reasons
#load data
plt <- get(load("plants.Rdata"))
#information check
#should print 5395, 38; and 38 column names
dim(plt)
names(plt)
#1. Calculate CapFac
plt$CapFac <- plt$NetGen/(plt$Capacity * 8760)
#check
summary(plt$CapFac)
#2. calculate Plant Nominal Heat Rate(Heatrate)
plt$HeatRate <- case_when(
plt$Combust == 1 ~1000*(plt$HeatInput/plt$NetGen),
plt$Combust == 0.5 ~1000*(plt$HeatInput/plt$CombGen),
TRUE ~0
)
#check: is this supposed to be this big in numbers??
summary(plt$HeatRate)
#3. calculate annual output emission rate for different pollutants
plt$CO2OutRate <- 2000 * plt$CO2/plt$NetGen
plt$SO2OutRate <- 2000 * plt$SO2/plt$NetGen
plt$NOXOutRate <- 2000 * plt$NOX/plt$NetGen
#The fraction of US electrictity from combustion plants
#todo: partial combustion accuracy
frac_com <- sum(plt$Combust*plt$NetGen)/sum(plt$NetGen)
dim(plt)
#remove all non-combustion plants for later analysis
comb <- filter(plt, Combust != 0)
dim(comb)
perc_co2 <- sum(comb$CO2)/sum(plt$CO2)
perc_so2 <- sum(comb$SO2)/sum(plt$SO2)
perc_no2 <- sum(comb$NO2)/sum(plt$NO2)
#compute the fraction of partial combustion's generation
perc_partial <- sum(comb[which(comb$Combust==0.5),]$NetGen)/sum(comb$NetGen)
print(perc_partial)
#riding partial combustion
df <- filter(comb, Combust == 1)
df_oil <- df %>%
filter(.,FuelCat == "OIL") %>%
mutate(
prim_perc = OilGen/NetGen
)
df_gas <- df %>%
filter(.,FuelCat == "GAS") %>%
mutate(
prim_perc = GasGen/NetGen
)
df_coal <- df %>%
filter(.,FuelCat == "COAL") %>%
mutate(
prim_perc = CoalGen/NetGen
)
df_bio <- df %>%
filter(.,FuelCat == "BIOMASS") %>%
mutate(
prim_perc = BiomassGen/NetGen
)
df_other <- df %>%
filter(.,FuelCat == "OTHRFOSL") %>%
mutate(
prim_perc = OtherFossilGen/NetGen
)
df_unk <- df %>%
filter(.,FuelCat == "WSTHTOTPUR") %>%
mutate(
prim_perc = OtherGen/NetGen
)
hist(df_oil$prim_perc, xlab = "OilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_gas$prim_perc, xlab = "GasGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim = c(0,1))
hist(df_coal$prim_perc, xlab = "CoalGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_bio$prim_perc, xlab = "BiomassGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_other$prim_perc, xlab = "OtherFossilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_unk$prim_perc, xlab = "OtherUnknownGen Fraction", main = "Histogram of Primary Fuel Fraction")
df <- df %>%
#select(-c("Combust")) %>%
mutate(
PrimPerc =
case_when(
FuelCat == "OIL" ~OilGen/NetGen,
FuelCat == "GAS" ~GasGen/NetGen,
FuelCat == "COAL" ~CoalGen/NetGen,
FuelCat == "BIOMASS" ~BiomassGen/NetGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen/NetGen,
FuelCat == "WSTHTOTPUR" ~OtherGen/NetGen
),
PrimGen =
case_when(
FuelCat == "OIL" ~OilGen,
FuelCat == "GAS" ~GasGen,
FuelCat == "COAL" ~CoalGen,
FuelCat == "BIOMASS" ~BiomassGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen,
FuelCat == "WSTHTOTPUR" ~OtherGen
)
)
#ggplot(df, aes(x = PrimPerc, xlim = c(0,1))) + geom_histogram() + facet_grid(cols = vars(FuelCat))
hist(df$PrimPerc, xlab = "PrimGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim =c(0,1))
pol_df <- df %>%
group_by(Fuel) %>%
summarize(
Performance = sum(NetGen),
CO2 = sum(CO2),
NOX = sum(NOX),
SO2 = sum(SO2)
)
pol_df <- pol_df %>%
mutate(
co2perc = CO2/sum(pol_df$CO2),
so2perc = SO2/sum(pol_df$SO2),
noxperc = NOX/sum(pol_df$NOX)
)
pol_df[which.max(pol_df$co2perc),]
pol_df[which.max(pol_df$so2perc),]
pol_df[which.max(pol_df$noxperc),]
pol_df[which.max(pol_df$Performance),]
names(pol_df)
pol_df <- pol_df %>%
mutate(
perf_factor = (CO2+NOX+SO2)/Performance
)
order(pol_df$perf_factor)
order(pol_df$perf_factor)(1:5)
order(pol_df$perf_factor)[1:5]
order(pol_df$perf_factor)[-5:-1]
order(pol_df$perf_factor)[-5:]
order(pol_df$perf_factor)[-5:-1]
pol_df[res(order(pol_df$perf_factor))[1:5],]
pol_df[rev(order(pol_df$perf_factor))[1:5],]
pol_df[rev(order(pol_df$perf_factor))[1:5],]
pol_df[order(pol_df$perf_factor)[1:5],]
knitr::opts_chunk$set(echo = F, warning = F, message = F)
#package loading
library(e1071)
library(neuralnet)
library(ggplot2)
library(polynom)
library(dplyr)
library(tidyr)
library(ggfortify)
library(pls)
library(tree)
library(gbm)
library(leaps)
library(AppliedPredictiveModeling)
library(caret)
library(e1071)
library(earth)
library(leaps)
library(boot)
library(kernlab)
library(randomForest)
library(foreach)
library(import)
library(neuralnet)
library(pls)
#library(foba) #cant install for R version reasons
#load data
plt <- get(load("plants.Rdata"))
#information check
#should print 5395, 38; and 38 column names
dim(plt)
names(plt)
#1. Calculate CapFac
plt$CapFac <- plt$NetGen/(plt$Capacity * 8760)
#check
summary(plt$CapFac)
#2. calculate Plant Nominal Heat Rate(Heatrate)
plt$HeatRate <- case_when(
plt$Combust == 1 ~1000*(plt$HeatInput/plt$NetGen),
plt$Combust == 0.5 ~1000*(plt$HeatInput/plt$CombGen),
TRUE ~0
)
#check: is this supposed to be this big in numbers??
summary(plt$HeatRate)
#3. calculate annual output emission rate for different pollutants
plt$CO2OutRate <- 2000 * plt$CO2/plt$NetGen
plt$SO2OutRate <- 2000 * plt$SO2/plt$NetGen
plt$NOXOutRate <- 2000 * plt$NOX/plt$NetGen
#The fraction of US electrictity from combustion plants
#todo: partial combustion accuracy
frac_com <- sum(plt$Combust*plt$NetGen)/sum(plt$NetGen)
dim(plt)
#remove all non-combustion plants for later analysis
comb <- filter(plt, Combust != 0)
dim(comb)
perc_co2 <- sum(comb$CO2)/sum(plt$CO2)
perc_so2 <- sum(comb$SO2)/sum(plt$SO2)
perc_no2 <- sum(comb$NO2)/sum(plt$NO2)
#compute the fraction of partial combustion's generation
perc_partial <- sum(comb[which(comb$Combust==0.5),]$NetGen)/sum(comb$NetGen)
print(perc_partial)
#riding partial combustion
df <- filter(comb, Combust == 1)
df_oil <- df %>%
filter(.,FuelCat == "OIL") %>%
mutate(
prim_perc = OilGen/NetGen
)
df_gas <- df %>%
filter(.,FuelCat == "GAS") %>%
mutate(
prim_perc = GasGen/NetGen
)
df_coal <- df %>%
filter(.,FuelCat == "COAL") %>%
mutate(
prim_perc = CoalGen/NetGen
)
df_bio <- df %>%
filter(.,FuelCat == "BIOMASS") %>%
mutate(
prim_perc = BiomassGen/NetGen
)
df_other <- df %>%
filter(.,FuelCat == "OTHRFOSL") %>%
mutate(
prim_perc = OtherFossilGen/NetGen
)
df_unk <- df %>%
filter(.,FuelCat == "WSTHTOTPUR") %>%
mutate(
prim_perc = OtherGen/NetGen
)
hist(df_oil$prim_perc, xlab = "OilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_gas$prim_perc, xlab = "GasGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim = c(0,1))
hist(df_coal$prim_perc, xlab = "CoalGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_bio$prim_perc, xlab = "BiomassGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_other$prim_perc, xlab = "OtherFossilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_unk$prim_perc, xlab = "OtherUnknownGen Fraction", main = "Histogram of Primary Fuel Fraction")
df <- df %>%
#select(-c("Combust")) %>%
mutate(
PrimPerc =
case_when(
FuelCat == "OIL" ~OilGen/NetGen,
FuelCat == "GAS" ~GasGen/NetGen,
FuelCat == "COAL" ~CoalGen/NetGen,
FuelCat == "BIOMASS" ~BiomassGen/NetGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen/NetGen,
FuelCat == "WSTHTOTPUR" ~OtherGen/NetGen
),
PrimGen =
case_when(
FuelCat == "OIL" ~OilGen,
FuelCat == "GAS" ~GasGen,
FuelCat == "COAL" ~CoalGen,
FuelCat == "BIOMASS" ~BiomassGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen,
FuelCat == "WSTHTOTPUR" ~OtherGen
)
)
#ggplot(df, aes(x = PrimPerc, xlim = c(0,1))) + geom_histogram() + facet_grid(cols = vars(FuelCat))
hist(df$PrimPerc, xlab = "PrimGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim =c(0,1))
pol_df <- df %>%
group_by(Fuel) %>%
summarize(
Performance = sum(NetGen),
CO2 = sum(CO2),
NOX = sum(NOX),
SO2 = sum(SO2)
)
pol_df <- pol_df %>%
mutate(
co2perc = CO2/sum(pol_df$CO2),
so2perc = SO2/sum(pol_df$SO2),
noxperc = NOX/sum(pol_df$NOX)
)
pol_df[which.max(pol_df$co2perc),]
pol_df[which.max(pol_df$so2perc),]
pol_df[which.max(pol_df$noxperc),]
pol_df[which.max(pol_df$Performance),]
print(pol_df[rev(order(pol_df$Performance)),c(1,2,6:8)])
pol_df <- pol_df %>%
mutate(
em_factor = (CO2+NOX+SO2)/Performance
)
pol_df[rev(order(pol_df$em_factor))[1:5],]
pol_df[order(pol_df$em_factor)[1:5],]
pol_df[order(pol_df$em_factor)[1:5],]
pol_df[order(pol_df$em_factor)[2:6],]
??histogram
??hist
ggplot(df, aes(x = PrimPerc, xlim = c(0,1))) + geom_histogram() + facet_grid(cols = vars(FuelCat))
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat))
??geom_histogram
??facet_grid
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat)) + facet_wrap(nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat)) + facet_wrap(cols = vars(FuelCat), nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat)) + facet_wrap(FuelCat, nrow = 3)
??facet_wrap
??facet_wrap
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat), nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat), scales = 'free', space = 'free', nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat),scales = 'free', space = 'free', nrow = 2)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat),scales = 'free', nrow = 2)
setwd("~/GitHub/spencerzhang-218x.github.io")
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(censusapi)
library(tidyverse)
library(tigris)
library(sf)
library(leaflet)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
