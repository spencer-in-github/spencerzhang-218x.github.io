plt$NOXOutRate <- 2000 * plt$NOX/plt$NetGen
#The fraction of US electrictity from combustion plants
#todo: partial combustion accuracy
frac_com <- sum(plt$Combust*plt$NetGen)/sum(plt$NetGen)
dim(plt)
#remove all non-combustion plants for later analysis
comb <- filter(plt, Combust != 0)
dim(comb)
perc_co2 <- sum(comb$CO2)/sum(plt$CO2)
perc_so2 <- sum(comb$SO2)/sum(plt$SO2)
perc_no2 <- sum(comb$NO2)/sum(plt$NO2)
#compute the fraction of partial combustion's generation
perc_partial <- sum(comb[which(comb$Combust==0.5),]$NetGen)/sum(comb$NetGen)
print(perc_partial)
#riding partial combustion
df <- filter(comb, Combust == 1)
df_oil <- df %>%
filter(.,FuelCat == "OIL") %>%
mutate(
prim_perc = OilGen/NetGen
)
df_gas <- df %>%
filter(.,FuelCat == "GAS") %>%
mutate(
prim_perc = GasGen/NetGen
)
df_coal <- df %>%
filter(.,FuelCat == "COAL") %>%
mutate(
prim_perc = CoalGen/NetGen
)
df_bio <- df %>%
filter(.,FuelCat == "BIOMASS") %>%
mutate(
prim_perc = BiomassGen/NetGen
)
df_other <- df %>%
filter(.,FuelCat == "OTHRFOSL") %>%
mutate(
prim_perc = OtherFossilGen/NetGen
)
df_unk <- df %>%
filter(.,FuelCat == "WSTHTOTPUR") %>%
mutate(
prim_perc = OtherGen/NetGen
)
hist(df_oil$prim_perc, xlab = "OilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_gas$prim_perc, xlab = "GasGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim = c(0,1))
hist(df_coal$prim_perc, xlab = "CoalGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_bio$prim_perc, xlab = "BiomassGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_other$prim_perc, xlab = "OtherFossilGen Fraction", main = "Histogram of Primary Fuel Fraction")
hist(df_unk$prim_perc, xlab = "OtherUnknownGen Fraction", main = "Histogram of Primary Fuel Fraction")
df <- df %>%
#select(-c("Combust")) %>%
mutate(
PrimPerc =
case_when(
FuelCat == "OIL" ~OilGen/NetGen,
FuelCat == "GAS" ~GasGen/NetGen,
FuelCat == "COAL" ~CoalGen/NetGen,
FuelCat == "BIOMASS" ~BiomassGen/NetGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen/NetGen,
FuelCat == "WSTHTOTPUR" ~OtherGen/NetGen
),
PrimGen =
case_when(
FuelCat == "OIL" ~OilGen,
FuelCat == "GAS" ~GasGen,
FuelCat == "COAL" ~CoalGen,
FuelCat == "BIOMASS" ~BiomassGen,
FuelCat == "OTHRFOSL" ~OtherFossilGen,
FuelCat == "WSTHTOTPUR" ~OtherGen
)
)
#ggplot(df, aes(x = PrimPerc, xlim = c(0,1))) + geom_histogram() + facet_grid(cols = vars(FuelCat))
hist(df$PrimPerc, xlab = "PrimGen Fraction", main = "Histogram of Primary Fuel Fraction", xlim =c(0,1))
pol_df <- df %>%
group_by(Fuel) %>%
summarize(
Performance = sum(NetGen),
CO2 = sum(CO2),
NOX = sum(NOX),
SO2 = sum(SO2)
)
pol_df <- pol_df %>%
mutate(
co2perc = CO2/sum(pol_df$CO2),
so2perc = SO2/sum(pol_df$SO2),
noxperc = NOX/sum(pol_df$NOX)
)
pol_df[which.max(pol_df$co2perc),]
pol_df[which.max(pol_df$so2perc),]
pol_df[which.max(pol_df$noxperc),]
pol_df[which.max(pol_df$Performance),]
print(pol_df[rev(order(pol_df$Performance)),c(1,2,6:8)])
pol_df <- pol_df %>%
mutate(
em_factor = (CO2+NOX+SO2)/Performance
)
pol_df[rev(order(pol_df$em_factor))[1:5],]
pol_df[order(pol_df$em_factor)[1:5],]
pol_df[order(pol_df$em_factor)[1:5],]
pol_df[order(pol_df$em_factor)[2:6],]
??histogram
??hist
ggplot(df, aes(x = PrimPerc, xlim = c(0,1))) + geom_histogram() + facet_grid(cols = vars(FuelCat))
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat))
??geom_histogram
??facet_grid
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat)) + facet_wrap(nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat)) + facet_wrap(cols = vars(FuelCat), nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() + facet_grid(cols = vars(FuelCat)) + facet_wrap(FuelCat, nrow = 3)
??facet_wrap
??facet_wrap
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat), nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat), scales = 'free', space = 'free', nrow = 3)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat),scales = 'free', space = 'free', nrow = 2)
ggplot(df, aes(x = PrimPerc)) + geom_histogram() +  facet_wrap(vars(FuelCat),scales = 'free', nrow = 2)
knitr::opts_chunk$set(echo = TRUE)
library(matlib)
install.packages("matlib")
library(matlib)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(censusapi)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717£59faa9a28f611dab")
paste0("b","a")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = 2019,
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
```
rm(list = ls())
library(tidyverse)
library(censusapi)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717£59faa9a28f611dab")
id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = 2019,
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
rm(list = ls())
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = 2019,
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = 2019,
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
library(tidyverse)
library(censusapi)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
)
library(censusapi)
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
) %>%
select(ends_with("E") & -c(state, NAME))
library(tidyverse)
library(censusapi)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
#id = c("A","B","C","D","E","F","G","H")
bay_income_race_2019 <- getCensus(
name = "acs/acs5",
vinatge = "2019",
region = "county:001,013,041,055,075,081,085,095,097",#BAY AREA COUNTIES
regionin = "state:06",
vars = "group(B19001A)" #group() means you want all the columns in the table
) %>%
select(ends_with("E") & -c(state, NAME))
#id = c("A","B","C","D","E","F","G","H")
bay_income_white <-
getCensus(
name = "acs/acs5",
vintage = 2019,
region = "county:001,013,041,055,075,081,085,095,097",
regionin = "state:06",
vars = "group(B19001A)"
) %>%
select(ends_with("E") & -c(state, NAME))
names(bay_income_white)
View(bay_income_white)
library(tidyverse)
library(censusapi)
library(sf)
library(tigris)
library(readxl)
library(leaflet)
temp <- tempfile()
download.file("https://oehha.ca.gov/media/downloads/calenviroscreen/document/calenviroscreen40resultsdatadictionaryf2021.zip",destfile = temp)
ces4 <- read_excel(
unzip(
temp,
"calenviroscreen40resultsdatadictionary_F_2021.xlsx"
),
sheet = "CES4.0FINAL_results"
)
unlink(temp)
df <- ces4 %>%
filter(`California County` %in% bay_county_names) %>%
select(`Census Tract`, PM2.5, Asthma) %>%
drop_na() %>%
left_join(
ca_tracts %>%
transmute(GEOID = as.numeric(GEOID)),
by = c("Census Tract" = "GEOID")
)
temp <- tempfile()
download.file("https://oehha.ca.gov/media/downloads/calenviroscreen/document/calenviroscreen40resultsdatadictionaryf2021.zip",destfile = temp)
ces4 <- read_excel(
unzip(
temp,
"calenviroscreen40resultsdatadictionary_F_2021.xlsx"
),
sheet = "CES4.0FINAL_results"
)
unlink(temp)
#in class note
ces4_clean <- ces4 %>% dplyr::select(!ends_with("Pctl")) #exclude the percentile columns
sum(is.na(ces4_clean$Poverty)) #75 rows with no data; cant do lm with
bay_county_names <-
c(
"Alameda",
"Contra Costa",
"Marin",
"Napa",
"San Francisco",
"San Mateo",
"Santa Clara",
"Solano",
"Sonoma"
)
ca_tracts <- tracts("CA", cb = T, progress_bar = F)
ces4_bay_pm25 <-
ces4 %>%
filter(`California County` %in% bay_county_names) %>%
select(`Census Tract`, PM2.5) %>%
left_join(
ca_tracts %>%
transmute(GEOID = as.numeric(GEOID)),
by = c("Census Tract" = "GEOID")
) %>%
st_as_sf()
pm25_pal <- colorNumeric(
palette = "Reds",
domain = ces4_bay_pm25$PM2.5
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = ces4_bay_pm25,
fillColor = ~pm25_pal(PM2.5),
color = "white",
weight = 0.5,
fillOpacity = 0.5,
label = ~PM2.5
)
summary(ces4_bay_pm25$PM2.5)
#asthma
ces4_bay_as <-
ces4 %>%
filter(`California County` %in% bay_county_names) %>%
select(`Census Tract`, Asthma) %>%
left_join(
ca_tracts %>%
transmute(GEOID = as.numeric(GEOID)),
by = c("Census Tract" = "GEOID")
) %>%
st_as_sf()
as_pal <- colorNumeric(
palette = "Reds",
domain = ces4_bay_pm25$Asthma
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = ces4_bay_as,
fillColor = ~as_pal(Asthma),
color = "white",
weight = 0.5,
fillOpacity = 0.5,
label = ~Asthma
)
df <- ces4 %>%
filter(`California County` %in% bay_county_names) %>%
select(`Census Tract`, PM2.5, Asthma) %>%
drop_na() %>%
left_join(
ca_tracts %>%
transmute(GEOID = as.numeric(GEOID)),
by = c("Census Tract" = "GEOID")
)
ggplot(
data = df,
aes(
x = PM2.5,
y = Asthma
)
) +
geom_point() +
geom_smooth(method = "lm")
model <- lm(Asthma ~PM2.5, df)
plot(density(residuals(model)))
model
model$residuals
model$terms
model$assign
model$coefficients
model$fitted.values
summary(model)
df <- df %>%
mutate(
logPM = log(PM2.5),
logAs = log(Asthma)
)
ggplot(
data = df,
aes(
x = logPM,
y = logAs
)
) +
geom_point() +
geom_smooth(method = "lm")
log_model <- lm(logAs ~logPM, df)
plot(density(residuals(log_model)))
plot(density(residuals(model)))
ggplot(
data = df,
aes(
x = logPM,
y = logAs
)
) +
geom_point() +
geom_smooth(method = "lm")
log_model <- lm(logAs ~logPM, df)
plot(density(residuals(log_model)))
df <- df %>%
mutate(
r = log_model$residuals
) %>%
st_as_sf()
#trying to make different color for negative&positive values
## Make vector of colors for values smaller than 0 (20 colors)
rc1 <- colorRampPalette(colors = c("red", "white"), space = "Lab")(20)
## Make vector of colors for values larger than 0 (180 colors)
rc2 <- colorRampPalette(colors = c("white", "green"), space = "Lab")(180)
## Combine the two color palettes
rampcols <- c(rc1, rc2)
df_pal <- colorNumeric(
palette = "Reds",
domain = df$r
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = df,
fillColor = ~df_pal(r),
color = "white",
weight = 0.5,
fillOpacity = 0.5,
label = ~r
)
ggplot(
data = df,
aes(
x = logPM,
y = logAs
)
) +
geom_point() +
geom_smooth(method = "lm")
log_model <- lm(logAs ~logPM, df)
plot(density(residuals(log_model)))
log_model <- lm(logAs ~logPM, df)
plot(density(residuals(log_model)))
#trying to make different color for negative&positive values
## Make vector of colors for values smaller than 0 (20 colors)
rc1 <- colorRampPalette(colors = c("red", "white"), space = "Lab")(20)
## Make vector of colors for values larger than 0 (180 colors)
rc2 <- colorRampPalette(colors = c("white", "green"), space = "Lab")(180)
## Combine the two color palettes
rampcols <- c(rc1, rc2)
df_pal <- colorNumeric(
palette = "Reds",
domain = df$r
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = df,
fillColor = ~df_pal(r),
color = "white",
weight = 0.5,
fillOpacity = 0.5,
label = ~r
)
df$r
head(df)
length(log_model$residuals)
setwd("~/GitHub/spencerzhang-218x.github.io")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(censusapi)
library(sf)
library(mapview)
library(tigris)
plot_ly(data = bay_education_income_tract, x=~perc_white, y=~perc_college, z=~perc_over100k, type="scatter3d", mode="markers", color = ~perc_over100k)
rm(list = ls())
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
acs_vars_2019_5yr <-
listCensusMetadata(
name = "2019/acs/acs5",
type = "variables"
)
bay_education_income_tract <-
getCensus(
name = "acs/acs5",
vintage = 2019,
region = "tract:*",
regionin = "state:06+county:001,013,041,055,075,081,085,095,097",
vars = c(
"B06009_001E",
"B06009_002E",
"B06009_003E",
"B19001_001E",
"B19001_014E",
"B19001_015E",
"B19001_016E",
"B19001_017E",
"B19001A_001E",
"B19001_001E"
)
) %>%
transmute(
tract = paste0(state, county, tract),
perc_college = 1 - (B06009_002E + B06009_003E) / B06009_001E,
perc_over100k = (B19001_014E + B19001_015E + B19001_016E + B19001_017E) / B19001_001E,
perc_white = B19001A_001E/B19001_001E
) %>%
filter(
!is.na(perc_college),
!is.na(perc_over100k),
!is.na(perc_white)
)
plot_ly(data = bay_education_income_tract, x=~perc_white, y=~perc_college, z=~perc_over100k, type="scatter3d", mode="markers", color = ~perc_over100k)
??plot_ly
library(plotly)
plot_ly(data = bay_education_income_tract, x=~perc_white, y=~perc_college, z=~perc_over100k, type="scatter3d", mode="markers", color = ~perc_over100k)
pums_2019_1yr <- getCensus(
name = "acs/acs1/pums",
vintage = 2019,
region = "public use microdata area:*",
regionin = "state:06",
vars = c(
"SERIALNO",
"SPORDER",
"PWGTP",
"WGTP",
"AGEP",
"SCHL",
"PINCP",
"RAC1P",
"HISP",
"LANX"
)
)
